#include<bits/stdc++.h>
using namespace std;
struct node
{
	struct node *l;
	struct node *r;
	int val;
	
};
int ans(struct node *root)
{
//	cout<<"%%%";
	map<struct node*,int>a;
	struct node* z;
	queue<struct node *>q;
	a[root]=1;
	q.push(root);
	while(!q.empty())
	{
		
		z=q.front();
		if(z->l==NULL&&z->r==NULL)
		{
			return a[z];
		}
		if(z->l!=NULL)
		{
		a[z->l]=a[z]+1;
		q.push(z->l);
		}
		if(z->r!=NULL)
		{
		a[z->r]=a[z]+1;
		q.push(z->r);
		}
		q.pop();
		
		
	}
}

struct node* newNode(int data)
{
    struct node *temp;
    temp=(struct node*)malloc(sizeof(struct node));
    temp->val = data;
    temp->l = temp->r = NULL;
    return temp;
}
 
// Driver program to test above functions
int main()
{
    // Let us create binary tree shown in above diagram
    struct node* root = newNode(1);
    root->l = newNode(2);
    root->r=newNode(3);
    root->l->l=newNode(4);
    root->l->r=newNode(5);
    
 
    cout << ans(root);
    return 0;
}

